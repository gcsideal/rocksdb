From 3205e91bd1376cbb99d61b1254e1feffb76d6d77 Mon Sep 17 00:00:00 2001
From: Adam Retter <adam.retter@googlemail.com>
Date: Wed, 16 Oct 2019 11:38:15 +0100
Subject: [PATCH 01/11] Add s390x builds to Travis

---
 .travis.yml | 51 +++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 51 insertions(+)

diff --git a/.travis.yml b/.travis.yml
index 296e7241a07..3a71b264bda 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -5,6 +5,7 @@ os:
 arch:
   - arm64
   - ppc64le
+  - s390x
 compiler:
   - clang
   - gcc
@@ -59,6 +60,12 @@ matrix:
   - os: linux
     arch: ppc64le
     env: JOB_NAME=make-gcc4.8
+  - os: linux
+    arch: s390x
+    env: JOB_NAME=cmake-mingw
+  - os: linux
+    arch: s390x
+    env: JOB_NAME=make-gcc4.8
   - os: linux
     compiler: clang
   - if: type = pull_request AND commit_message !~ /FULL_CI/
@@ -73,6 +80,10 @@ matrix:
     os: linux
     arch: ppc64le
     env: TEST_GROUP=1
+  - if: type = pull_request AND commit_message !~ /FULL_CI/
+    os: linux
+    arch: s390x
+    env: TEST_GROUP=1
   - if: type = pull_request AND commit_message !~ /FULL_CI/
     os : linux
     arch: arm64
@@ -81,6 +92,10 @@ matrix:
     os: linux
     arch: ppc64le
     env: TEST_GROUP=2
+  - if: type = pull_request AND commit_message !~ /FULL_CI/
+    os: linux
+    arch: s390x
+    env: TEST_GROUP=2
   - if: type = pull_request AND commit_message !~ /FULL_CI/
     os : linux
     arch: arm64
@@ -89,6 +104,10 @@ matrix:
     os: linux
     arch: ppc64le
     env: TEST_GROUP=3
+  - if: type = pull_request AND commit_message !~ /FULL_CI/
+    os: linux
+    arch: s390x
+    env: TEST_GROUP=3
   - if: type = pull_request AND commit_message !~ /FULL_CI/
     os : linux
     arch: arm64
@@ -97,6 +116,10 @@ matrix:
     os: linux
     arch: ppc64le
     env: TEST_GROUP=4
+  - if: type = pull_request AND commit_message !~ /FULL_CI/
+    os: linux
+    arch: s390x
+    env: TEST_GROUP=4
   - if: type = pull_request AND commit_message !~ /FULL_CI/
     os : linux
     arch: arm64
@@ -109,6 +132,10 @@ matrix:
     os: linux
     arch: ppc64le
     env: JOB_NAME=java_test
+  - if: type = pull_request AND commit_message !~ /FULL_CI/ AND commit_message !~ /java/
+    os: linux
+    arch: s390x
+    env: JOB_NAME=java_test
   - if: type = pull_request AND commit_message !~ /FULL_CI/
     os : linux
     arch: arm64
@@ -117,6 +144,10 @@ matrix:
     os: linux
     arch: ppc64le
     env: JOB_NAME=lite_build
+  - if: type = pull_request AND commit_message !~ /FULL_CI/
+    os: linux
+    arch: s390x
+    env: JOB_NAME=lite_build
   - if: type = pull_request AND commit_message !~ /FULL_CI/
     os : linux
     arch: arm64
@@ -125,6 +156,10 @@ matrix:
     os: linux
     arch: ppc64le
     env: JOB_NAME=examples
+  - if: type = pull_request AND commit_message !~ /FULL_CI/
+    os: linux
+    arch: s390x
+    env: JOB_NAME=examples
   - if: type = pull_request AND commit_message !~ /FULL_CI/
     os : linux
     arch: arm64
@@ -133,6 +168,10 @@ matrix:
     os: linux
     arch: ppc64le
     env: JOB_NAME=cmake-gcc8
+  - if: type = pull_request AND commit_message !~ /FULL_CI/
+    os: linux
+    arch: s390x
+    env: JOB_NAME=cmake-gcc8
   - if: type = pull_request AND commit_message !~ /FULL_CI/
     os : linux
     arch: arm64
@@ -141,6 +180,10 @@ matrix:
     os: linux
     arch: ppc64le
     env: JOB_NAME=cmake-gcc9
+  - if: type = pull_request AND commit_message !~ /FULL_CI/
+    os: linux
+    arch: s390x
+    env: JOB_NAME=cmake-gcc9
   - if: type = pull_request AND commit_message !~ /FULL_CI/
     os : linux
     arch: arm64
@@ -149,6 +192,10 @@ matrix:
     os: linux
     arch: ppc64le
     env: JOB_NAME=cmake-gcc9-c++20
+  - if: type = pull_request AND commit_message !~ /FULL_CI/
+    os: linux
+    arch: s390x
+    env: JOB_NAME=cmake-gcc9-c++20
   - if: type = pull_request AND commit_message !~ /FULL_CI/
     os : linux
     arch: arm64
@@ -157,6 +204,10 @@ matrix:
     os: linux
     arch: ppc64le
     env: JOB_NAME=status_checked
+  - if: type = pull_request AND commit_message !~ /FULL_CI/
+    os: linux
+    arch: s390x
+    env: JOB_NAME=status_checked
 
 install:
   - if [ "${JOB_NAME}" == cmake-gcc8 ]; then

From 8d6670d39f82adcf31c95390dee2c0bf4f0995c4 Mon Sep 17 00:00:00 2001
From: Adam Retter <adam.retter@googlemail.com>
Date: Sat, 14 Dec 2019 17:24:03 +0100
Subject: [PATCH 02/11] Set correct CPU arch for CMake on s390x

---
 CMakeLists.txt | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

From 57b45e35378af3a6ac1ec520e4e14fe042e2a1d1 Mon Sep 17 00:00:00 2001
From: Adam Retter <adam.retter@googlemail.com>
Date: Sat, 14 Dec 2019 18:03:43 +0100
Subject: [PATCH 03/11] Earlier versions of GCC do not support 256 byte cache
 lines on s390x Closes https://github.com/facebook/rocksdb/issues/4022

---
 port/port_posix.h | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/port/port_posix.h b/port/port_posix.h
index 291139764a5..c98c34e7f21 100644
--- a/port/port_posix.h
+++ b/port/port_posix.h
@@ -190,7 +190,11 @@ extern void InitOnce(OnceType* once, void (*initializer)());
 #define ALIGN_AS(n) /*empty*/
 #else
 #if defined(__s390__)
+#if defined(__GNUC__) && __GNUC__ < 6
+#define CACHE_LINE_SIZE 64U
+#else
 #define CACHE_LINE_SIZE 256U
+#endif
 #elif defined(__powerpc__) || defined(__aarch64__)
 #define CACHE_LINE_SIZE 128U
 #else

From 535480063f46ed0877f4df87df3082167161ae2c Mon Sep 17 00:00:00 2001
From: Adam Retter <adam.retter@googlemail.com>
Date: Sat, 14 Dec 2019 18:35:19 +0100
Subject: [PATCH 04/11] Fix RocksJava library name on s390x

---
 Makefile                                             | 4 ++--
 java/src/main/java/org/rocksdb/util/Environment.java | 2 +-
 2 files changed, 3 insertions(+), 3 deletions(-)

diff --git a/Makefile b/Makefile
index 2748643782e..a1913f6e7b7 100644
--- a/Makefile
+++ b/Makefile
@@ -2002,7 +2002,7 @@ JAVA_INCLUDE = -I$(JAVA_HOME)/include/ -I$(JAVA_HOME)/include/linux
 ifeq ($(PLATFORM), OS_SOLARIS)
 	ARCH := $(shell isainfo -b)
 else ifeq ($(PLATFORM), OS_OPENBSD)
-	ifneq (,$(filter amd64 ppc64 ppc64le arm64 aarch64 sparc64, $(MACHINE)))
+	ifneq (,$(filter amd64 ppc64 ppc64le s390x arm64 aarch64 sparc64, $(MACHINE)))
 		ARCH := 64
 	else
 		ARCH := 32
@@ -2022,7 +2022,7 @@ ifneq ($(origin JNI_LIBC), undefined)
   JNI_LIBC_POSTFIX = -$(JNI_LIBC)
 endif
 
-ifneq (,$(filter ppc% arm64 aarch64 sparc64, $(MACHINE)))
+ifneq (,$(filter ppc% s390x arm64 aarch64 sparc64, $(MACHINE)))
 	ROCKSDBJNILIB = librocksdbjni-linux-$(MACHINE)$(JNI_LIBC_POSTFIX).so
 else
 	ROCKSDBJNILIB = librocksdbjni-linux$(ARCH)$(JNI_LIBC_POSTFIX).so
diff --git a/java/src/main/java/org/rocksdb/util/Environment.java b/java/src/main/java/org/rocksdb/util/Environment.java
index b5de34b756f..a2b9e23c82d 100644
--- a/java/src/main/java/org/rocksdb/util/Environment.java
+++ b/java/src/main/java/org/rocksdb/util/Environment.java
@@ -106,7 +106,7 @@ public static String getJniLibraryName(final String name) {
       if (isPowerPC() || isAarch64()) {
         return String.format("%sjni-linux-%s%s", name, ARCH, getLibcPostfix());
       } else if (isS390x()) {
-        return String.format("%sjni-linux%s", name, ARCH);
+        return String.format("%sjni-linux-%s", name, ARCH);
       } else {
         return String.format("%sjni-linux%s%s", name, arch, getLibcPostfix());
       }

From d0a190d0bfd41344febadf4818068dbdeeee31ab Mon Sep 17 00:00:00 2001
From: Adam Retter <adam.retter@googlemail.com>
Date: Tue, 24 Mar 2020 12:40:25 +0100
Subject: [PATCH 05/11] Fix Folly hardware_destructive_interference_size for
 s390x

---
 third-party/folly/folly/Portability.h | 7 +++++++
 third-party/folly/folly/lang/Align.h  | 2 +-
 2 files changed, 8 insertions(+), 1 deletion(-)

diff --git a/third-party/folly/folly/Portability.h b/third-party/folly/folly/Portability.h
index 93a4e41a59a..b88b3d0c8eb 100644
--- a/third-party/folly/folly/Portability.h
+++ b/third-party/folly/folly/Portability.h
@@ -31,6 +31,12 @@
 #define FOLLY_PPC64 0
 #endif
 
+#if defined(__s390x__)
+#define FOLLY_S390X 1
+#else
+#define FOLLY_S390X 0
+#endif
+
 #if defined(__has_builtin)
 #define FOLLY_HAS_BUILTIN(...) __has_builtin(__VA_ARGS__)
 #else
@@ -57,6 +63,7 @@ constexpr bool kIsArchArm = FOLLY_ARM == 1;
 constexpr bool kIsArchAmd64 = FOLLY_X64 == 1;
 constexpr bool kIsArchAArch64 = FOLLY_AARCH64 == 1;
 constexpr bool kIsArchPPC64 = FOLLY_PPC64 == 1;
+constexpr bool kIsArchS390X = FOLLY_S390X == 1;
 } // namespace folly
 
 namespace folly {
diff --git a/third-party/folly/folly/lang/Align.h b/third-party/folly/folly/lang/Align.h
index 2a404b91d1f..2d3717aadf4 100644
--- a/third-party/folly/folly/lang/Align.h
+++ b/third-party/folly/folly/lang/Align.h
@@ -120,7 +120,7 @@ struct alignas(max_align_v) max_align_t {};
 //
 //  mimic: std::hardware_destructive_interference_size, C++17
 constexpr std::size_t hardware_destructive_interference_size =
-    kIsArchArm ? 64 : 128;
+    (kIsArchArm || kIsArchS390X) ? 64 : 128;
 static_assert(hardware_destructive_interference_size >= max_align_v, "math?");
 
 //  Memory locations within the same cache line are subject to constructive

From d494c77e6e3d07a0520fb1728d2ba949721e95f7 Mon Sep 17 00:00:00 2001
From: Jonathan Albrecht <jonathan.albrecht@ibm.com>
Date: Thu, 15 Jul 2021 11:38:23 -0700
Subject: [PATCH 06/11] Implement toku_time_now(void) for s390x

---
 .../lock/range/range_tree/lib/portability/toku_time.h         | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/utilities/transactions/lock/range/range_tree/lib/portability/toku_time.h b/utilities/transactions/lock/range/range_tree/lib/portability/toku_time.h
index 4425a4a2e57..225e3fa7211 100644
--- a/utilities/transactions/lock/range/range_tree/lib/portability/toku_time.h
+++ b/utilities/transactions/lock/range/range_tree/lib/portability/toku_time.h
@@ -179,6 +179,10 @@ static inline tokutime_t toku_time_now(v
       return (uint64_t)pmccntr * 64;  // Should optimize to << 6
     }
   }
+#elif defined(__s390x__)
+  uint64_t result;
+  asm volatile("stckf %0" : "=Q"(result) : : "cc");
+  return result;
 #else
 #error No timer implementation for this platform
 #endif

From f6a7b54933abef6606eb8b4a78bbf887f3629170 Mon Sep 17 00:00:00 2001
From: Jonathan Albrecht <jonathan.albrecht@ibm.com>
Date: Fri, 16 Jul 2021 10:55:45 -0400
Subject: [PATCH 07/11] Change delclaration of num_recovered_edits_ to size_t
 to match the callback arg

This is required on big endian platforms which would truncate an int to 0.
---
 db/version_set_test.cc | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/db/version_set_test.cc b/db/version_set_test.cc
index 90088100c54..8475dffa8f5 100644
--- a/db/version_set_test.cc
+++ b/db/version_set_test.cc
@@ -1889,7 +1889,7 @@ class VersionSetAtomicGroupTest : public VersionSetTestBase,
         });
     SyncPoint::GetInstance()->SetCallBack(
         "VersionEditHandlerBase::Iterate:Finish", [&](void* arg) {
-          num_recovered_edits_ = *reinterpret_cast<int*>(arg);
+          num_recovered_edits_ = *reinterpret_cast<size_t*>(arg);
         });
     SyncPoint::GetInstance()->SetCallBack(
         "AtomicGroupReadBuffer::AddEdit:AtomicGroup",
@@ -1929,7 +1929,7 @@ class VersionSetAtomicGroupTest : public VersionSetTestBase,
   bool first_in_atomic_group_ = false;
   bool last_in_atomic_group_ = false;
   int num_edits_in_atomic_group_ = 0;
-  int num_recovered_edits_ = 0;
+  size_t num_recovered_edits_ = 0;
   VersionEdit corrupted_edit_;
   VersionEdit edit_with_incorrect_group_size_;
   std::unique_ptr<log::Writer> log_writer_;

From 1ae47a7628f9a010ed84195de7e0a224a6808d23 Mon Sep 17 00:00:00 2001
From: Jonathan Albrecht <jonathan.albrecht@ibm.com>
Date: Fri, 16 Jul 2021 16:50:53 -0400
Subject: [PATCH 08/11] On s390x, set -march=z196 (to match what major distros
 currently use) only when PORTABLE=1, otherwise use default -march-native.

---
 CMakeLists.txt                    | 7 ++++---
 build_tools/build_detect_platform | 6 ++++--
 2 files changed, 8 insertions(+), 5 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index a2ceed43348..3dc87fec671 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -267,6 +267,13 @@ if(CMAKE_SYSTEM_PROCESSOR MATCHES "arm64|aarch64|AARCH64")
   endif(HAS_ARMV8_CRC)
 endif(CMAKE_SYSTEM_PROCESSOR MATCHES "arm64|aarch64|AARCH64")
 
+if(CMAKE_SYSTEM_PROCESSOR MATCHES "s390x")
+  CHECK_C_COMPILER_FLAG("-march=native" HAS_S390X_MARCH_NATIVE)
+  if(HAS_S390X_MARCH_NATIVE)
+    message(STATUS " HAS_S390X_MARCH_NATIVE yes")
+  endif(HAS_S390X_MARCH_NATIVE)
+endif(CMAKE_SYSTEM_PROCESSOR MATCHES "s390x")
+
 option(PORTABLE "build a portable binary" OFF)
 option(FORCE_SSE42 "force building with SSE4.2, even when PORTABLE=ON" OFF)
 option(FORCE_AVX "force building with AVX, even when PORTABLE=ON" OFF)
@@ -292,6 +292,9 @@ if(PORTABLE)
     if(FORCE_AVX2)
       set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mavx2 -mbmi -mlzcnt")
     endif()
+    if(CMAKE_SYSTEM_PROCESSOR MATCHES "^s390x")
+      set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -march=z196")
+    endif()
   endif()
 else()
   if(MSVC)
diff --git a/build_tools/build_detect_platform b/build_tools/build_detect_platform
index 1d5138dbf32..473f2ae6b72 100755
--- a/build_tools/build_detect_platform
+++ b/build_tools/build_detect_platform
@@ -638,8 +638,6 @@ if test "0$PORTABLE" -eq 0; then
     # Tune for this POWER processor, treating '+' models as base models
     POWER=`LD_SHOW_AUXV=1 /bin/true | grep AT_PLATFORM | grep -E -o power[0-9]+`
     COMMON_FLAGS="$COMMON_FLAGS -mcpu=$POWER -mtune=$POWER "
-  elif test -n "`echo $TARGET_ARCHITECTURE | grep ^s390x`"; then
-    COMMON_FLAGS="$COMMON_FLAGS -march=z10 "
   elif test -n "`echo $TARGET_ARCHITECTURE | grep -e^arm -e^aarch64`"; then
     # TODO: Handle this with approprite options.
     COMMON_FLAGS="$COMMON_FLAGS"
@@ -661,6 +659,10 @@ else
     TRY_SSE_ETC="1"
   fi
 
+  if test -n "`echo $TARGET_ARCHITECTURE | grep ^s390x`"; then
+    COMMON_FLAGS="$COMMON_FLAGS -march=z196 "
+  fi
+
   if [[ "${PLATFORM}" == "OS_MACOSX" ]]; then
     # For portability compile for macOS 10.12 (2016) or newer
     COMMON_FLAGS="$COMMON_FLAGS -mmacosx-version-min=10.12"

From 6e1d4244b3ca9ed3a9505f30eea96beb524b0626 Mon Sep 17 00:00:00 2001
From: Jonathan Albrecht <jonathan.albrecht@ibm.com>
Date: Fri, 17 Sep 2021 15:25:41 -0400
Subject: [PATCH 09/11] Update some expected test values for CACHE_LINE_SIZE >=
 256

Summary:
s390x has a CACHE_LINE_SIZE of 256 but the following tests failed
with that size:
 * Full/FullBloomTest.OptimizeForMemory/0
 * DBPropertiesTest.AggregatedTableProperties
 * DBPropertiesTest.AggregatedTablePropertiesAtLevel

On an x86_64 build using TEST_CACHE_LINE_SIZE == 256, the same
tests failed. The expected values in the tests were
conditionally updated for CACHE_LINE_SIZE >= 256 on x86_64.

Test Plan:
make check on x86_64 with:
 * TEST_CACHE_LINE_SIZE unset
 * TEST_CACHE_LINE_SIZE=128
 * TEST_CACHE_LINE_SIZE=256
make check on s390x with:
 * TEST_CACHE_LINE_SIZE unset
 * TEST_CACHE_LINE_SIZE=64
 * TEST_CACHE_LINE_SIZE=128
---
 db/db_properties_test.cc | 5 +++--
 monitoring/statistics.h  | 2 ++
 util/bloom_test.cc       | 3 ++-
 3 files changed, 7 insertions(+), 3 deletions(-)

diff --git a/db/db_properties_test.cc b/db/db_properties_test.cc
index 8ff4a30b051..fbe74f3f37f 100644
--- a/db/db_properties_test.cc
+++ b/db/db_properties_test.cc
@@ -213,7 +213,7 @@ void VerifySimilar(uint64_t a, uint64_t b, double bias) {
 
 void VerifyTableProperties(
     const TableProperties& base_tp, const TableProperties& new_tp,
-    double filter_size_bias = CACHE_LINE_SIZE >= 256 ? 0.15 : 0.1,
+    double filter_size_bias = CACHE_LINE_SIZE >= 256 ? 0.18 : 0.1,
     double index_size_bias = 0.1, double data_size_bias = 0.1,
     double num_data_blocks_bias = 0.05) {
   VerifySimilar(base_tp.data_size, new_tp.data_size, data_size_bias);
@@ -607,7 +607,8 @@ TEST_F(DBPropertiesTest, AggregatedTablePropertiesAtLevel) {
           value_is_delta_encoded);
       // Gives larger bias here as index block size, filter block size,
       // and data block size become much harder to estimate in this test.
-      VerifyTableProperties(expected_tp, tp, 0.5, 0.4, 0.4, 0.25);
+      VerifyTableProperties(expected_tp, tp, CACHE_LINE_SIZE >= 256 ? 0.6 : 0.5,
+                            0.4, 0.4, 0.25);
     }
   }
 }
diff --git a/monitoring/statistics.h b/monitoring/statistics.h
index 9ad1087634f..20661777fb0 100644
--- a/monitoring/statistics.h
+++ b/monitoring/statistics.h
@@ -100,7 +100,9 @@ class StatisticsImpl : public Statistics {
     void operator delete[](void *p) { port::cacheline_aligned_free(p); }
   };
 
+#ifndef TEST_CACHE_LINE_SIZE
   static_assert(sizeof(StatisticsData) % CACHE_LINE_SIZE == 0, "Expected " TOSTRING(CACHE_LINE_SIZE) "-byte aligned");
+#endif
 
   CoreLocalArray<StatisticsData> per_core_stats_;
 
diff --git a/util/bloom_test.cc b/util/bloom_test.cc
index 7b1dee2a5fe..dbde584b330 100644
--- a/util/bloom_test.cc
+++ b/util/bloom_test.cc
@@ -552,7 +552,8 @@ TEST_P(FullBloomTest, OptimizeForMemory) {
     }
     if (FLAGS_bits_per_key == 10) {
       EXPECT_LE(total_fp_rate / double{nfilters}, 0.011);
-      EXPECT_GE(total_fp_rate / double{nfilters}, 0.008);
+      EXPECT_GE(total_fp_rate / double{nfilters},
+                CACHE_LINE_SIZE >= 256 ? 0.007 : 0.008);
     }
 
     int64_t ex_min_total_size = int64_t{FLAGS_bits_per_key} * total_keys / 8;

From 95cde26c4412890fc459f1b783ea65b86b01c476 Mon Sep 17 00:00:00 2001
From: Jonathan Albrecht <jonathan.albrecht@ibm.com>
Date: Tue, 21 Sep 2021 16:50:06 -0400
Subject: [PATCH 10/11] Fix LZ4 compression format_version==1 on big endian
 platforms

Summary:
LZ4_Uncompress only reads the first 4 bytes of input_data into output_len when
format_version==1. This gets the wrong end of the bits on big endian platforms
even in the case where the file was written on big endian.
Fix reading the length so a file written on big endian can be read on big
endian. This allows related tests to pass on big endian. Reading and writing
across endianness is still not supported.
---
 util/compression.h | 6 +++++-
 1 file changed, 5 insertions(+), 1 deletion(-)

diff --git a/util/compression.h b/util/compression.h
index 207f9949ef3..a58b2b575dd 100644
--- a/util/compression.h
+++ b/util/compression.h
@@ -1136,7 +1136,11 @@ inline CacheAllocationPtr LZ4_Uncompress(const UncompressionInfo& info,
     if (input_length < 8) {
       return nullptr;
     }
-    memcpy(&output_len, input_data, sizeof(output_len));
+    if (port::kLittleEndian) {
+      memcpy(&output_len, input_data, sizeof(output_len));
+    } else {
+      memcpy(&output_len, input_data + 4, sizeof(output_len));
+    }
     input_length -= 8;
     input_data += 8;
   }

From 7ec32078b96abe03025389c8551a17a2aa34b408 Mon Sep 17 00:00:00 2001
From: Jonathan Albrecht <jonathan.albrecht@ibm.com>
Date: Mon, 27 Sep 2021 15:53:37 -0400
Subject: [PATCH 11/11] On s390x, workaround versions of g++ that don't
 understand -march=native

Summary:
Older versions of g++ up to at least 5.4 did not understand
-march=native. Check that flag on s390x and use -march=z196
instead.
---
 CMakeLists.txt                    | 11 ++++++++++-
 build_tools/build_detect_platform |  8 ++++++++
 2 files changed, 18 insertions(+), 1 deletion(-)

diff --git a/build_tools/build_detect_platform b/build_tools/build_detect_platform
index 473f2ae6b72..00bc5079470 100755
--- a/build_tools/build_detect_platform
+++ b/build_tools/build_detect_platform
@@ -645,6 +645,14 @@ if test "0$PORTABLE" -eq 0; then
     COMMON_FLAGS="$COMMON_FLAGS"
   elif test -n "`echo $TARGET_ARCHITECTURE | grep ^aarch64`"; then
     COMMON_FLAGS="$COMMON_FLAGS"
+  elif test -n "`echo $TARGET_ARCHITECTURE | grep ^s390x`"; then
+    if echo 'int main() {}' | $CXX $PLATFORM_CXXFLAGS -x c++ \
+      -fsyntax-only -march=native - -o /dev/null 2>/dev/null; then
+      COMMON_FLAGS="$COMMON_FLAGS -march=native "
+    else
+      COMMON_FLAGS="$COMMON_FLAGS -march=z196 "
+    fi
+    COMMON_FLAGS="$COMMON_FLAGS"
   elif [ "$TARGET_OS" == "IOS" ]; then
     COMMON_FLAGS="$COMMON_FLAGS"
   elif [ "$TARGET_OS" == "AIX" ] || [ "$TARGET_OS" == "SunOS" ]; then
