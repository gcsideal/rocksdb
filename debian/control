Source: rocksdb
Section: database
Priority: optional
Maintainer: Laszlo Boszormenyi (GCS) <gcs@debian.org>
Build-Depends: debhelper (>= 9), g++ (>= 4:4.7), libgflags-dev, libgtest-dev, libsnappy-dev, libbz2-dev, zlib1g-dev
Standards-Version: 3.9.6
Homepage: http://rocksdb.org/

Package: librocksdb-dev
Section: libdevel
Architecture: any
Depends: ${misc:Depends}, ${shlibs:Depends},  librocksdb4.1 (= ${binary:Version})
Description: persistent Key-Value Store for Flash and RAM Storage (development)
 C++ library providing an embedded key-value store, where keys and values are
 arbitrary byte streams. It was developed at Facebook based on LevelDB and
 provides backwards-compatible support for LevelDB APIs.
 .
 RocksDB is optimized for Flash with extremely low latencies. RocksDB uses a
 Log Structured Database Engine for storage, written entirely in C++.
 .
 RocksDB features highly flexible configuration settings that may be tuned to
 run on a variety of production environments, including pure memory, Flash,
 hard disks or HDFS. It supports various compression algorithms and good tools
 for production support and debugging.
 .
 Features:
   - Designed for application servers wanting to store up to a few terabytes
     of data on locally attached Flash drives or in RAM
   - Optimized for storing small to medium size key-values on fast storage --
     flash devices or in-memory
   - Scales linearly with number of CPUs so that it works well on ARM
     processors
 .
 This package contains libraries and header files for developing
 applications that use librocksdb .

Package: librocksdb4.1
Architecture: any
Depends: ${misc:Depends}, ${shlibs:Depends}
Description: persistent Key-Value Store for Flash and RAM Storage
 C++ library providing an embedded key-value store, where keys and values are
 arbitrary byte streams. It was developed at Facebook based on LevelDB and
 provides backwards-compatible support for LevelDB APIs.
 .
 RocksDB is optimized for Flash with extremely low latencies. RocksDB uses a
 Log Structured Database Engine for storage, written entirely in C++.
 .
 RocksDB features highly flexible configuration settings that may be tuned to
 run on a variety of production environments, including pure memory, Flash,
 hard disks or HDFS. It supports various compression algorithms and good tools
 for production support and debugging.
 .
 Features:
   - Designed for application servers wanting to store up to a few terabytes
     of data on locally attached Flash drives or in RAM
   - Optimized for storing small to medium size key-values on fast storage --
     flash devices or in-memory
   - Scales linearly with number of CPUs so that it works well on ARM
     processors

Package: librocksdb4.1-dbg
Architecture: any
Section: debug
Priority: extra
Depends: ${misc:Depends}, librocksdb4.1 (= ${binary:Version})
Description: persistent Key-Value Store for Flash and RAM Storage (debug-symbols)
 C++ library providing an embedded key-value store, where keys and values are
 arbitrary byte streams. It was developed at Facebook based on LevelDB and
 provides backwards-compatible support for LevelDB APIs.
 .
 RocksDB is optimized for Flash with extremely low latencies. RocksDB uses a
 Log Structured Database Engine for storage, written entirely in C++.
 .
 RocksDB features highly flexible configuration settings that may be tuned to
 run on a variety of production environments, including pure memory, Flash,
 hard disks or HDFS. It supports various compression algorithms and good tools
 for production support and debugging.
 .
 Features:
   - Designed for application servers wanting to store up to a few terabytes
     of data on locally attached Flash drives or in RAM
   - Optimized for storing small to medium size key-values on fast storage --
     flash devices or in-memory
   - Scales linearly with number of CPUs so that it works well on ARM
     processors
 .
 This package contains debug symbols for the librocksdb4.1 library.
